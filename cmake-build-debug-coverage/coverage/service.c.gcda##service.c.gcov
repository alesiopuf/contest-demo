        -:    0:Source:C:/Users/user/CLionProjects/POO_Lab_2-4/src/service.c
        -:    0:Graph:C:\Users\user\CLionProjects\POO_Lab_2-4\cmake-build-debug-coverage\CMakeFiles\POO_Lab_2_4.dir\src\service.c.gcno
        -:    0:Data:C:\Users\user\CLionProjects\POO_Lab_2-4\cmake-build-debug-coverage\CMakeFiles\POO_Lab_2_4.dir\src\service.c.gcda
        -:    0:Runs:1
        -:    1://
        -:    2:// Created by user on 3/13/2024.
        -:    3://
        -:    4:#include "../header/service.h"
        -:    5:
        -:    6:#include <assert.h>
        -:    7:
        -:    8:/**
        -:    9: * Adds a participant to a list
        -:   10: * @param l list to be added to
        -:   11: * @param p participant to be added
        -:   12: * @return 0 if successful, 1 otherwise
        -:   13: */
function addParticipant called 7 returned 100% blocks executed 100%
        7:   14:int addParticipant(MyList* l, Participant p) {
        7:   15:    if (validateParticipant(p) != 0)
        7:   15-block  0
call    0 returned 7
branch  1 taken 2 (fallthrough)
branch  2 taken 5
        2:   16:        return 1;
        2:   16-block  0
        5:   17:    if (contains(l, p) == 1)
        5:   17-block  0
call    0 returned 5
branch  1 taken 1 (fallthrough)
branch  2 taken 4
        1:   18:        return 1;
        1:   18-block  0
        4:   19:    add(l, p);
        4:   19-block  0
call    0 returned 4
        4:   20:    return 0;
        -:   21:}
        -:   22:
        -:   23:/**
        -:   24: * Updates an existing participant
        -:   25: * @param l list to be modified
        -:   26: * @param p participant to be changed
        -:   27: * @param newParticipant new fields
        -:   28: * @return 0 if successful, 1 otherwise
        -:   29: */
function updateParticipant called 3 returned 100% blocks executed 100%
        3:   30:int updateParticipant(MyList* l, Participant p, Participant newParticipant) {
        3:   31:    if (validateParticipant(newParticipant) != 0)
        3:   31-block  0
call    0 returned 3
branch  1 taken 1 (fallthrough)
branch  2 taken 2
        1:   32:        return 1;
        1:   32-block  0
        3:   33:    for (int i = 0; i < size(l); i++)
        2:   33-block  0
        1:   33-block  1
        3:   33-block  2
call    0 returned 3
branch  1 taken 2
branch  2 taken 1 (fallthrough)
        2:   34:        if (compareParticipant(get(l, i), p) == 0) {
        2:   34-block  0
call    0 returned 2
call    1 returned 2
branch  2 taken 1 (fallthrough)
branch  3 taken 1
        1:   35:            put(l, i, newParticipant);
        1:   35-block  0
call    0 returned 1
        1:   36:            return 0;
        -:   37:        }
        1:   38:    return 1;
        1:   38-block  0
        -:   39:}
        -:   40:
        -:   41:/**
        -:   42: * Deletes a existing participant
        -:   43: * @param l list to be deleted from
        -:   44: * @param p participant to be deleted
        -:   45: * @return 0 if successful, 1 otherwise
        -:   46: */
function deleteParticipant called 2 returned 100% blocks executed 100%
        2:   47:int deleteParticipant(MyList* l, Participant p) {
        3:   48:    for (int i = 0; i < size(l); i++)
        2:   48-block  0
        1:   48-block  1
        3:   48-block  2
call    0 returned 3
branch  1 taken 2
branch  2 taken 1 (fallthrough)
        2:   49:        if (compareParticipant(get(l, i), p) == 0) {
        2:   49-block  0
call    0 returned 2
call    1 returned 2
branch  2 taken 1 (fallthrough)
branch  3 taken 1
        1:   50:            delete(l, i);
        1:   50-block  0
call    0 returned 1
        1:   51:            return 0;
        -:   52:        }
        1:   53:    return 1;
        1:   53-block  0
        -:   54:}
        -:   55:
function testAddParticipant called 1 returned 100% blocks executed 79%
        1:   56:void testAddParticipant() {
        1:   57:    MyList l = create();
        1:   57-block  0
call    0 returned 1
       1*:   58:    assert(size(&l) == 0);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   58-block  0
call    3 never executed
        1:   58-block  1
        -:   59:    int error;
        -:   60:
        1:   61:    error = addParticipant(&l, constructParticipant("", "", 10));
        1:   61-block  0
call    0 returned 1
call    1 returned 1
       1*:   62:    assert(error != 0);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   62-block  0
call    2 never executed
        1:   62-block  1
       1*:   63:    assert(size(&l) == 0);
        1:   63-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   63-block  1
call    3 never executed
        1:   63-block  2
        -:   64:
        1:   65:    error = addParticipant(&l, constructParticipant("alesio", "", -10));
        1:   65-block  0
call    0 returned 1
call    1 returned 1
       1*:   66:    assert(error != 0);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   66-block  0
call    2 never executed
        1:   66-block  1
       1*:   67:    assert(size(&l) == 0);
        1:   67-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   67-block  1
call    3 never executed
        1:   67-block  2
        -:   68:
        1:   69:    error = addParticipant(&l, constructParticipant("puf", "alesio", 10));
        1:   69-block  0
call    0 returned 1
call    1 returned 1
       1*:   70:    assert(error == 0);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   70-block  0
call    2 never executed
        1:   70-block  1
       1*:   71:    assert(size(&l) == 1);
        1:   71-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   71-block  1
call    3 never executed
        1:   71-block  2
        -:   72:
        1:   73:    error = addParticipant(&l, constructParticipant("puf", "alesio", 10));
        1:   73-block  0
call    0 returned 1
call    1 returned 1
       1*:   74:    assert(error == 1);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   74-block  0
call    2 never executed
        1:   74-block  1
       1*:   75:    assert(size(&l) == 1);
        1:   75-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   75-block  1
call    3 never executed
        1:   75-block  2
        1:   76:}
        -:   77:
function testUpdateParticipant called 1 returned 100% blocks executed 80%
        1:   78:void testUpdateParticipant() {
        1:   79:    MyList l = create();
        1:   79-block  0
call    0 returned 1
       1*:   80:    assert(size(&l) == 0);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   80-block  0
call    3 never executed
        1:   80-block  1
        -:   81:    int error;
        -:   82:
        1:   83:    error = addParticipant(&l, constructParticipant("puf", "alesio", 10));
        1:   83-block  0
call    0 returned 1
call    1 returned 1
       1*:   84:    assert(error == 0);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   84-block  0
call    2 never executed
        1:   84-block  1
       1*:   85:    assert(size(&l) == 1);
        1:   85-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   85-block  1
call    3 never executed
        1:   85-block  2
        -:   86:
        1:   87:    error = updateParticipant(&l, constructParticipant("puf", "alesio", 10),
        1:   87-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
        -:   88:                              constructParticipant("puf", "alesio-andrei", 10));
       1*:   89:    assert(error == 0);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   89-block  0
call    2 never executed
        1:   89-block  1
       1*:   90:    assert(size(&l) == 1);
        1:   90-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   90-block  1
call    3 never executed
        1:   90-block  2
        -:   91:
        1:   92:    error = updateParticipant(&l, constructParticipant("puf", "alesio", 10),
        1:   92-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
        -:   93:                              constructParticipant("alesio", "alesio-andrei", -10));
       1*:   94:    assert(error == 1);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   94-block  0
call    2 never executed
        1:   94-block  1
       1*:   95:    assert(size(&l) == 1);
        1:   95-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   95-block  1
call    3 never executed
        1:   95-block  2
        -:   96:
        1:   97:    error = updateParticipant(&l, constructParticipant("puf", "alesio", 20),
        1:   97-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
        -:   98:                              constructParticipant("puf", "alesio-andrei", 10));
       1*:   99:    assert(error == 1);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   99-block  0
call    2 never executed
        1:   99-block  1
       1*:  100:    assert(size(&l) == 1);
        1:  100-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  100-block  1
call    3 never executed
        1:  100-block  2
        1:  101:}
        -:  102:
function testDeleteParticipant called 1 returned 100% blocks executed 79%
        1:  103:void testDeleteParticipant() {
        1:  104:    MyList l = create();
        1:  104-block  0
call    0 returned 1
       1*:  105:    assert(size(&l) == 0);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  105-block  0
call    3 never executed
        1:  105-block  1
        -:  106:    int error;
        -:  107:
        1:  108:    error = addParticipant(&l, constructParticipant("puf", "alesio", 10));
        1:  108-block  0
call    0 returned 1
call    1 returned 1
       1*:  109:    assert(error == 0);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  109-block  0
call    2 never executed
        1:  109-block  1
       1*:  110:    assert(size(&l) == 1);
        1:  110-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  110-block  1
call    3 never executed
        1:  110-block  2
        -:  111:
        1:  112:    error = addParticipant(&l, constructParticipant("voda", "alesio", 10));
        1:  112-block  0
call    0 returned 1
call    1 returned 1
       1*:  113:    assert(error == 0);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  113-block  0
call    2 never executed
        1:  113-block  1
       1*:  114:    assert(size(&l) == 2);
        1:  114-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  114-block  1
call    3 never executed
        1:  114-block  2
        -:  115:
        1:  116:    error = deleteParticipant(&l, constructParticipant("puf", "alesio", 10));
        1:  116-block  0
call    0 returned 1
call    1 returned 1
       1*:  117:    assert(error == 0);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  117-block  0
call    2 never executed
        1:  117-block  1
       1*:  118:    assert(size(&l) == 1);
        1:  118-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  118-block  1
call    3 never executed
        1:  118-block  2
        -:  119:
        1:  120:    error = deleteParticipant(&l, constructParticipant("puf", "alesio", 10));
        1:  120-block  0
call    0 returned 1
call    1 returned 1
       1*:  121:    assert(error == 1);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  121-block  0
call    2 never executed
        1:  121-block  1
       1*:  122:    assert(size(&l) == 1);
        1:  122-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  122-block  1
call    3 never executed
        1:  122-block  2
        1:  123:}
